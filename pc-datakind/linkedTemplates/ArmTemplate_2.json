{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "pc-datakind"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/CSV_CopyNewFilesByLastModifiedDate')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new and changed files only by using LastModifiedDate",
				"activities": [
					{
						"name": "CopyNewFiles",
						"description": "Copy new and changed files only by using LastModifiedDate",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": {
										"value": "@{pipeline().parameters.LastModified_From}",
										"type": "Expression"
									},
									"modifiedDatetimeEnd": {
										"value": "@{pipeline().parameters.LastModified_To}",
										"type": "Expression"
									},
									"wildcardFolderPath": {
										"value": "@pipeline().parameters.Directory_Source",
										"type": "Expression"
									},
									"wildcardFileName": {
										"value": "@pipeline().parameters.datasetFileName",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_SomFoodPrices_copied",
								"type": "DatasetReference",
								"parameters": {
									"datasetFileName": {
										"value": "@pipeline().parameters.datasetFileName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_SomFoodPrices_Modified",
								"type": "DatasetReference",
								"parameters": {
									"datasetFileName": {
										"value": "@pipeline().parameters.sinkdatasetFileName",
										"type": "Expression"
									},
									"Container": {
										"value": "@pipeline().parameters.FolderPath_Destination",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.Directory_Destination",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FolderPath_Source": {
						"type": "String",
						"defaultValue": "datakind"
					},
					"Directory_Source": {
						"type": "String",
						"defaultValue": "copied"
					},
					"FolderPath_Destination": {
						"type": "String",
						"defaultValue": "datakind"
					},
					"Directory_Destination": {
						"type": "String",
						"defaultValue": "pqtarget"
					},
					"LastModified_From": {
						"type": "String",
						"defaultValue": "2023-01-24T00:00:00Z"
					},
					"LastModified_To": {
						"type": "String",
						"defaultValue": "2023-01-25T00:00:00Z"
					},
					"datasetFileName": {
						"type": "string",
						"defaultValue": "SomFoodPrices_copied"
					},
					"sinkdatasetFileName": {
						"type": "string",
						"defaultValue": "ds_SomFoodPrices_Modified"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_KenftsFundingCluster')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "countryCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "countryCode",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "name",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "code",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "startDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "startDate",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "endDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "endDate",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "year",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "year",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "clusterCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "clusterCode",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "cluster",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cluster",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "requirements",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "requirements",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "funding",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "funding",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "percentFunded",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "percentFunded",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_KenftsFundingClusterSrc",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_KenftsFundingCluster_copied",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Kenya"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_KenftsFundingClusterGlobal')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data2",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_KenftsFundingGlobalClusterSrc",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_KenftsFundingClusterGlobal_copied",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Kenya"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_KenftsIncomingFunding')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "date",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "budgetYear",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "budgetYear",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "description",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "description",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "amountUSD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "amountUSD",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "srcOrganization",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "srcOrganization",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "srcOrganizationTypes",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "srcOrganizationTypes",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "srcLocations",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "srcLocations",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "srcUsageYearStart",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "srcUsageYearStart",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "srcUsageYearEnd",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "srcUsageYearEnd",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "destPlan",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "destPlan",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "destPlanCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "destPlanCode",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "destPlanId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "destPlanId",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "destOrganization",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "destOrganization",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "destOrganizationTypes",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "destOrganizationTypes",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "destGlobalClusters",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "destGlobalClusters",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "destLocations",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "destLocations",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "destProject",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "destProject",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "destProjectCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "destProjectCode",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "destEmergency",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "destEmergency",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "destUsageYearStart",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "destUsageYearStart",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "destUsageYearEnd",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "destUsageYearEnd",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "contributionType",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "contributionType",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "flowType",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "flowType",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "method",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "method",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "boundary",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "boundary",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "onBoundary",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "onBoundary",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "status",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "status",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "firstReportedDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "firstReportedDate",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "decisionDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "decisionDate",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "keywords",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "keywords",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "originalAmount",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "originalAmount",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "originalCurrency",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "originalCurrency",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "exchangeRate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "exchangeRate",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "refCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "refCode",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "createdAt",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "createdAt",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "updatedAt",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "updatedAt",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_KenftsIncomingFundingSrc",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "KenftsIncomingFunding_copied",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Kenya"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_KenftsReqFunding')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_KenftsReqFundingSrc",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "KenftsReqFunding_copied",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Kenya"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_SomFoodPrices')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Filter1",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('GetColumns')",
								"type": "Expression"
							},
							"condition": {
								"value": "@not(equals(item(), '#'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_SomFoodPrices_copied",
								"type": "DatasetReference",
								"parameters": {
									"datasetFileName": "SomFoodPrices_copied"
								}
							},
							"fieldList": [
								"structure"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.structure",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append variable1",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "GetColumns",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_SomFoodPricesSrc",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_SomFoodPrices_copied",
								"type": "DatasetReference",
								"parameters": {
									"datasetFileName": "SomFoodPrices_copied"
								}
							}
						]
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data3",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "temp_somfoodprices",
											"type": "DatasetReference",
											"parameters": {
												"tempFileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "temp_somefoodprices_target",
											"type": "DatasetReference",
											"parameters": {
												"tempSinkFileName": "somefoodprices_target"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Copy data3_copy1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Filter1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "temp_somfoodprices",
								"type": "DatasetReference",
								"parameters": {
									"tempFileName": {
										"value": "@pipeline().parameters.dataset",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "temp_somefoodprices_target",
								"type": "DatasetReference",
								"parameters": {
									"tempSinkFileName": "somefoodprices_target"
								}
							}
						]
					},
					{
						"name": "Filter2",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Copy data1').output.dataWritten",
								"type": "Expression"
							},
							"condition": {
								"value": "@not(equals(item(), '#'))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"tableName": {
						"type": "string",
						"defaultValue": "somfoodprices"
					},
					"dataset": {
						"type": "string",
						"defaultValue": "SomFoodPrices_copied"
					},
					"input": {
						"type": "array"
					}
				},
				"variables": {
					"GetColumns": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Somalia"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_SomFoodPricesMontly')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_SomFoodPricesMontlySrc",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_SomFoodPricesMonthly_copied",
								"type": "DatasetReference",
								"parameters": {
									"datasetFileName": "SomFoodPricesMonthly_copied"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Somalia"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/KenFoodPrices')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Kenya"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_KenFoodPrices_copied",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_datakindDB",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "split1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "cleandate"
						},
						{
							"name": "cast1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          date as string,",
						"          admin1 as string,",
						"          admin2 as string,",
						"          market as string,",
						"          latitude as string,",
						"          longitude as string,",
						"          category as string,",
						"          commodity as string,",
						"          unit as string,",
						"          priceflag as string,",
						"          pricetype as string,",
						"          currency as string,",
						"          price as string,",
						"          usdprice as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"cast1 split(contains(array(toString(columns())), isNull(#item)),",
						"     disjoint: false) ~> split1@(Null, Good)",
						"source1 filter(not(startsWith(date, '#'))) ~> filter1",
						"filter1 derive(date = toDate(date)) ~> cleandate",
						"cleandate cast(output(",
						"          date as date,",
						"          admin1 as string,",
						"          admin2 as string,",
						"          market as string,",
						"          latitude as string,",
						"          longitude as string,",
						"          category as string,",
						"          commodity as string,",
						"          unit as string,",
						"          priceflag as string,",
						"          pricetype as string,",
						"          currency as string,",
						"          price as float,",
						"          usdprice as float",
						"     ),",
						"     errors: true) ~> cast1",
						"split1@Good sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/KenHealthFacilities')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Kenya"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "KenHealthFacilities_copied",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_datakindDB",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Code as short,",
						"          Name as string,",
						"          Registration_number as string,",
						"          {Keph level} as string,",
						"          {Facility type} as string,",
						"          Owner as string,",
						"          {Regulatory body} as string,",
						"          Beds as short,",
						"          Cots as short,",
						"          County as string,",
						"          Constituency as string,",
						"          {Sub county} as string,",
						"          Ward as string,",
						"          {Operation status} as string,",
						"          Open_whole_day as boolean,",
						"          Open_public_holidays as boolean,",
						"          Open_weekends as boolean,",
						"          Open_late_night as boolean,",
						"          Service_names as string,",
						"          Approved as boolean,",
						"          {Public visible} as boolean,",
						"          Closed as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 split(contains(array(toString(columns())), isNull(#item)),",
						"     disjoint: false) ~> split1@(Null, Good)",
						"split1@Good sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/KenHealthIndicators')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Kenya"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "KenHealthIndicators_copied",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_datakindDB",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "split1"
						},
						{
							"name": "cast1"
						},
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Country Name} as string,",
						"          {Country ISO3} as string,",
						"          Year as string,",
						"          {Indicator Name} as string,",
						"          {Indicator Code} as string,",
						"          Value as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"filter1 split(contains(array(toString(columns())), isNull(#item)),",
						"     disjoint: false) ~> split1@(Null, Good)",
						"split1@Good cast(output(",
						"          {Country Name} as string,",
						"          {Country ISO3} as string,",
						"          Year as integer,",
						"          {Indicator Name} as string,",
						"          {Indicator Code} as string,",
						"          Value as float",
						"     ),",
						"     errors: true) ~> cast1",
						"source1 filter(not(startsWith(Year, '#'))) ~> filter1",
						"cast1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     stagingSchemaName: 'public',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/KenftsFundingClusterMerged_cleaning')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Kenya"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_KenftsFundingCluster_copied",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "ds_KenftsFundingClusterGlobal_copied",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "temp_KenftsFundingCluster_target",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "split1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "join1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          countryCode as string,",
						"          id as string,",
						"          name as string,",
						"          code as string,",
						"          startDate as string,",
						"          endDate as string,",
						"          year as string,",
						"          clusterCode as string,",
						"          cluster as string,",
						"          requirements as string,",
						"          funding as string,",
						"          percentFunded as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          countryCode as string,",
						"          id as string,",
						"          name as string,",
						"          code as string,",
						"          startDate as string,",
						"          endDate as string,",
						"          year as string,",
						"          clusterCode as string,",
						"          cluster as string,",
						"          requirements as string,",
						"          funding as string,",
						"          percentFunded as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"filter1 split(contains(array(toString(columns())), isNull(#item)),",
						"     disjoint: false) ~> split1@(Null, Good)",
						"join1 filter(not(contains(array(toString(columns())), startsWith(#item, \"#\")))) ~> filter1",
						"source1, source2 join(source1@countryCode == source2@countryCode,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"split1@Good sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['temp_KenftsFundingCluster_target'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1),",
						"     format: 'table') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/KenftsFundingClusterMerged_final')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Kenya"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "temp_KenftsFundingCluster_target",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_datakindDB2",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/KenftsIncomingFunding')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Kenya"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "KenftsIncomingFunding_copied",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_datakindDB",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "split1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "types"
						}
					],
					"scriptLines": [
						"source(output(",
						"          date as string,",
						"          budgetYear as string,",
						"          description as string,",
						"          amountUSD as string,",
						"          srcOrganization as string,",
						"          srcOrganizationTypes as string,",
						"          srcLocations as string,",
						"          srcUsageYearStart as string,",
						"          srcUsageYearEnd as string,",
						"          destPlan as string,",
						"          destPlanCode as string,",
						"          destPlanId as string,",
						"          destOrganization as string,",
						"          destOrganizationTypes as string,",
						"          destGlobalClusters as string,",
						"          destLocations as string,",
						"          destProject as string,",
						"          destProjectCode as string,",
						"          destEmergency as string,",
						"          destUsageYearStart as string,",
						"          destUsageYearEnd as string,",
						"          contributionType as string,",
						"          flowType as string,",
						"          method as string,",
						"          boundary as string,",
						"          onBoundary as string,",
						"          status as string,",
						"          firstReportedDate as string,",
						"          decisionDate as string,",
						"          keywords as string,",
						"          originalAmount as string,",
						"          originalCurrency as string,",
						"          exchangeRate as string,",
						"          id as string,",
						"          refCode as string,",
						"          createdAt as string,",
						"          updatedAt as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"types split(contains(array(toString(columns())), isNull(#item)),",
						"     disjoint: false) ~> split1@(Null, Good)",
						"source1 filter(not(startsWith(date, '#'))) ~> filter1",
						"filter1 derive(date = toDate(date)) ~> types",
						"split1@Good sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/KenftsReqFundingCovid')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Kenya"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "KenftsReqFundingCovid_copied",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_datakindDB",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "split1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "types"
						}
					],
					"scriptLines": [
						"source(output(",
						"          countryCode as string,",
						"          id as string,",
						"          name as string,",
						"          code as string,",
						"          typeId as string,",
						"          typeName as string,",
						"          startDate as string,",
						"          endDate as string,",
						"          year as string,",
						"          requirements as string,",
						"          funding as string,",
						"          covidFunding as string,",
						"          covidPercentageOfFunding as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"types split(contains(array(toString(columns())), isNull(#item)),",
						"     disjoint: false) ~> split1@(Null, Good)",
						"source1 filter(not(startsWith(countryCode, '#'))) ~> filter1",
						"filter1 derive(id = toInteger(id)) ~> types",
						"split1@Good sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SomFoodPrices_cleaning')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Somalia"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_SomFoodPrices_copied",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "temp_somefoodprices_target",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          date as string,",
						"          admin1 as string,",
						"          admin2 as string,",
						"          market as string,",
						"          latitude as string,",
						"          longitude as string,",
						"          category as string,",
						"          commodity as string,",
						"          unit as string,",
						"          priceflag as string,",
						"          pricetype as string,",
						"          currency as string,",
						"          price as string,",
						"          usdprice as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 filter(not(contains(array(toString(columns())), startsWith(#item, \"#\")))) ~> filter1",
						"filter1 split(contains(array(toString(columns())), isNull(#item)),",
						"     disjoint: false) ~> split1@(Null, Good)",
						"split1@Good sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          date as string,",
						"          admin1 as string,",
						"          admin2 as string,",
						"          market as string,",
						"          latitude as string,",
						"          longitude as string,",
						"          category as string,",
						"          commodity as string,",
						"          unit as string,",
						"          priceflag as string,",
						"          pricetype as string,",
						"          currency as string,",
						"          price as string,",
						"          usdprice as string",
						"     ),",
						"     partitionFileNames:['tempsomefoodprices_target'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SomFoodPrices_final')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Somalia"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "temp_somefoodprices_target",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_datakindDB2",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          date as date,",
						"          admin1 as string,",
						"          admin2 as string,",
						"          market as string,",
						"          latitude as double,",
						"          longitude as double,",
						"          category as string,",
						"          commodity as string,",
						"          unit as string,",
						"          priceflag as string,",
						"          pricetype as string,",
						"          currency as string,",
						"          price as double,",
						"          usdprice as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SomftsReqFundingCluster_cleaning')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Somalia"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SomftsReqFundingCluster_copied",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "temp_SomftsReqFundingCluster_target",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          countryCode as string,",
						"          id as string,",
						"          name as string,",
						"          code as string,",
						"          startDate as string,",
						"          endDate as string,",
						"          year as string,",
						"          clusterCode as string,",
						"          cluster as string,",
						"          requirements as string,",
						"          funding as string,",
						"          percentFunded as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 filter(not(contains(array(toString(columns())), startsWith(#item, \"#\")))) ~> filter1",
						"filter1 split(contains(array(toString(columns())), isNull(#item)),",
						"     disjoint: false) ~> split1@(Null, Good)",
						"split1@Good sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          countryCode as string,",
						"          id as string,",
						"          name as string,",
						"          code as string,",
						"          startDate as string,",
						"          endDate as string,",
						"          year as string,",
						"          clusterCode as string,",
						"          cluster as string,",
						"          requirements as string,",
						"          funding as string,",
						"          percentFunded as string",
						"     ),",
						"     partitionFileNames:['temp_somftsreqfundingcluster_target'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SomftsReqFundingCluster_final')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Somalia"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "temp_SomftsReqFundingCluster_target",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_datakindDB2",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          countryCode as string,",
						"          id as short,",
						"          name as string,",
						"          code as string,",
						"          startDate as date,",
						"          endDate as date,",
						"          year as short,",
						"          clusterCode as short,",
						"          cluster as string,",
						"          requirements as integer,",
						"          funding as integer,",
						"          percentFunded as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pq_KenFoodPrices')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "ds_KenFoodPrices_copied",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> ds_KenFoodPrices_copied",
							"dataset": {
								"referenceName": "ds_KenFoodPrices_copied",
								"type": "DatasetReference"
							}
						}
					],
					"script": "section Section1;\r\nshared ds_KenFoodPrices_copied = let AdfDoc = AzureStorage.BlobContents(\"https://pcoulibalystorage.blob.core.windows.net/datakind/copied/KenFoodPrice\"),Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv]), PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true]) in  PromotedHeaders;\r\nshared UserQuery = let Source = #\"ds_KenFoodPrices_copied\",\r\n  #\"Removed top rows\" = Table.Skip(Source, 1) in #\"Removed top rows\";\r\n",
					"documentLocale": "en-us"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pq_KenftsFundingCluster')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "ds_KenftsFundingCluster_copied",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> ds_KenftsFundingCluster_copied",
							"dataset": {
								"referenceName": "ds_KenftsFundingCluster_copied",
								"type": "DatasetReference"
							}
						}
					],
					"script": "section Section1;\r\nshared ds_KenftsFundingCluster_copied = let AdfDoc = AzureStorage.BlobContents(\"https://pcoulibalystorage.blob.core.windows.net/datakind/copied/KenftsFundingCluster\"),Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv]), PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true]) in  PromotedHeaders;\r\nshared UserQuery = let Source = #\"ds_KenftsFundingCluster_copied\",\r\n  #\"Removed top rows\" = Table.Skip(Source, 1) in #\"Removed top rows\";\r\n",
					"documentLocale": "en-us"
				}
			},
			"dependsOn": []
		}
	]
}